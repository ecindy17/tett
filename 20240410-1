// Operations on a Fibonacci heap in C

#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <string.h>
#include <limits.h>

typedef struct _NODE {
  int key;
  int value;
  int degree;
  struct _NODE *left_sibling;
  struct _NODE *right_sibling;
  struct _NODE *parent;
  struct _NODE *child;
  bool mark;
  bool visited;
} NODE;

typedef struct fibanocci_heap {
  int n;
  NODE *min;
  int phi;
  int degree;
} FIB_HEAP;

int thirdValue = 0;
bool flag=false;
FIB_HEAP *make_fib_heap();
void insertion(FIB_HEAP *H, NODE *new, int val, int valval);
NODE *extract_min(FIB_HEAP *H);
void consolidate(FIB_HEAP *H);
void fib_heap_link(FIB_HEAP *H, NODE *y, NODE *x);
NODE *find_min_node(FIB_HEAP *H);
void decrease_key(FIB_HEAP *H, NODE *node, int key);
void cut(FIB_HEAP *H, NODE *node_to_be_decrease, NODE *parent_node);
void cascading_cut(FIB_HEAP *H, NODE *parent_node);
void Delete_Node(FIB_HEAP *H, int dec_key, int dec_val);
void heap_link(FIB_HEAP *H, NODE *x, NODE *y);
void heap_remove_from(FIB_HEAP *H, NODE *x);

FIB_HEAP *make_fib_heap(){
  FIB_HEAP *H;
  H = (FIB_HEAP *)malloc(sizeof(FIB_HEAP));
  H->n = 0;
  H->min = NULL;
  H->phi = 0;
  H->degree = 0;
  return H;
}

// Printing the heap
void print_heap(NODE *n){
  NODE *x;
  for (x = n;; x = x->right_sibling) {
    if (x->child == NULL) {
      printf("node with no child (%d/%d) \n", x->key, x->value);
    } else {
      printf("NODE(%d/%d) with child (%d) \n", x->key, x->value, x->child->key );
      print_heap(x->child);
    }
    if (x->right_sibling == n) {
      break;
    }
  }
}

// Inserting nodes
void insertion(FIB_HEAP *H, NODE *new, int val, int valval){
  new = (NODE *)malloc(sizeof(NODE));
  new->key = val;
  new->value = valval;
  new->degree = 0;
  new->mark = false;
  new->parent = NULL;
  new->child = NULL;
  new->visited = false;
  new->left_sibling = new;
  new->right_sibling = new;
  if (H->min == NULL) {
    H->min = new;
  } else {
    H->min->left_sibling->right_sibling = new;
    new->right_sibling = H->min;
    new->left_sibling = H->min->left_sibling;
    H->min->left_sibling = new;
    if (new->key < H->min->key) {
      H->min = new;
    }
  }
  (H->n)++;
}

// Find min node
NODE *find_min_node(FIB_HEAP *H){
  if (H == NULL) {
    printf(" n Fibonacci heap not yet created n \n");
    return NULL;
  } else
    return H->min;
}

// Union operation
FIB_HEAP *unionHeap(FIB_HEAP *H1, FIB_HEAP *H2){
  FIB_HEAP *Hnew;
  Hnew = make_fib_heap();
  Hnew->min = H1->min;

  NODE *temp1, *temp2;
  temp1 = Hnew->min->right_sibling;
  temp2 = H2->min->left_sibling;

  Hnew->min->right_sibling->left_sibling = H2->min->left_sibling;
  Hnew->min->right_sibling = H2->min;
  H2->min->left_sibling = Hnew->min;
  temp2->right_sibling = temp1;

  if ((H1->min == NULL) || (H2->min != NULL && H2->min->key < H1->min->key))
    Hnew->min = H2->min;
  Hnew->n = H1->n + H2->n;
  return Hnew;
}

// Calculate the degree
int cal_degree(int n){
    int count = 0;
    while (n > 0) {
        n = n / 2;
        count++;
    }
    return count;
}

void heap_match_degrees(FIB_HEAP *H, NODE **A, NODE *x){
  // printf("heap_match_degrees\n");
    int d = x->degree;
    while(A[d] != NULL){
        if (d > 99){
            exit(1);
        }
        NODE *y = A[d];
        if (x->key > y->key) {
          NODE *exchange_help;
          exchange_help = x;
          x = y;
          y = exchange_help;
        }
        if (y == H->min)
          H->min = x;
        fib_heap_link(H, y, x);
        if (y->right_sibling == x)
          H->min = x;
        A[d] = NULL;
        d++;
    }
    A[d] = x;
}

void  heap_consolidate(FIB_HEAP *H){
    int degree, i, d;
    degree = cal_degree(H->n);
    NODE *A[degree], *x, *y, *z;
    for (i = 0; i <= degree; i++) {
        A[i] = NULL;
    }
    x = H->min;
    heap_match_degrees(H, A, x);
    H->min = NULL;
    for (i = 0; i < degree; i++) {
        if (A[i] != NULL) {
            A[i]->left_sibling = A[i];
            A[i]->right_sibling = A[i];
            if (H->min == NULL) {
                H->min = A[i];
            } else {
                H->min->left_sibling->right_sibling = A[i];
                A[i]->right_sibling = H->min;
                A[i]->left_sibling = H->min->left_sibling;
                H->min->left_sibling = A[i];
                if (A[i]->key < H->min->key) {
                    H->min = A[i];
                }
            }
            if (H->min == NULL) {
                H->min = A[i];
            } else if (A[i]->key < H->min->key) {
                H->min = A[i];
            }
        }
    }
    // free(A);
}

// Consolidate function
void consolidate(FIB_HEAP *H){
    int degree, i, d;
    degree = cal_degree(H->n);
    
    NODE *A[degree], *x, *y, *z;
    for (i = 0; i <= degree; i++) {
        A[i] = NULL;
    }
    x = H->min;
    NODE *last = x->left_sibling;
    while(x != last){
      heap_match_degrees(H, A, x);
      x = x->right_sibling;
    }
    
    heap_match_degrees(H ,A , last);
    
    H->min = NULL;
    for (i = 0; i < degree; i++) {
        if (A[i] != NULL) {
            A[i]->left_sibling = A[i];
            A[i]->right_sibling = A[i];
            if (H->min == NULL) {
                H->min = A[i];
            } else {
                H->min->left_sibling->right_sibling = A[i];
                A[i]->right_sibling = H->min;
                A[i]->left_sibling = H->min->left_sibling;
                H->min->left_sibling = A[i];
                if (A[i]->key < H->min->key) {
                    H->min = A[i];
                }
            }
            if (H->min == NULL) {
                H->min = A[i];
            } else if (A[i]->key < H->min->key) {
                H->min = A[i];
            }
        }
    }
}

// Linking
void fib_heap_link(FIB_HEAP *H, NODE *y, NODE *x){
  y->right_sibling->left_sibling = y->left_sibling;
  y->left_sibling->right_sibling = y->right_sibling;

  if (x->right_sibling == x)
    H->min = x;

  y->left_sibling = y;
  y->right_sibling = y;
  y->parent = x;

  if (x->child == NULL) {
    x->child = y;
  }
  y->right_sibling = x->child;
  y->left_sibling = x->child->left_sibling;
  x->child->left_sibling->right_sibling = y;
  x->child->left_sibling = y;
  if ((y->key) < (x->child->key))
    x->child = y;

  (x->degree)++;
}

void  heap_remove_from(FIB_HEAP *H, NODE *x){
    // assert(!x->parent);
    if (x->right_sibling == x){
         H->min = NULL;
    }else{
        x->left_sibling->right_sibling = x->right_sibling;
        x->right_sibling->left_sibling = x->left_sibling;
        H->min = x->right_sibling;
    }
    x->left_sibling = x;
    x->right_sibling = x;
    x->parent = NULL;
}

void heap_link(FIB_HEAP *H, NODE *x, NODE *y){
    // assert(x);
    // assert(y);
    // assert(x->degree == y->degree);
    // if (x->key > y->key){
    //     return heap_link(H, y, x);
    // }
    heap_remove_from(H, y);
    if (x->child == NULL) {
        x->child = y;
    }
    y->right_sibling = x->child;
    y->left_sibling = x->child->left_sibling;
    x->child->left_sibling->right_sibling = y;
    x->child->left_sibling = y;
    if ((y->key) < (x->child->key))
        x->child = y;
    x->degree++;
    // y->hasLostKid = 0;
    // return x;
}


// Extract min
NODE *extract_min(FIB_HEAP *H){
    if (H->min == NULL)
        printf("n The heap is empty \n");
    else {
        NODE *temp = H->min;
        NODE *pntr;
        pntr = temp;
        NODE *x = NULL;
        if (temp->child != NULL) {
            x = temp->child;
            do {
                pntr = x->right_sibling;
                (H->min->left_sibling)->right_sibling = x;
                x->right_sibling = H->min;
                x->left_sibling = H->min->left_sibling;
                H->min->left_sibling = x;
                if (x->key < H->min->key)
                    H->min = x;
                x->parent = NULL;
                x = pntr;
            } while (pntr != temp->child);
        }

        (temp->left_sibling)->right_sibling = temp->right_sibling;
        (temp->right_sibling)->left_sibling = temp->left_sibling;
        H->min = temp->right_sibling;

        if (temp == temp->right_sibling && temp->child == NULL)
            H->min = NULL;
        else {
            H->min = temp->right_sibling;
            consolidate(H);
            // heap_consolidate(H);
        }
        H->n = H->n - 1;
        return temp;
    }
    return H->min;
}

void cut(FIB_HEAP *H, NODE *node_to_be_decrease, NODE *parent_node){
  NODE *temp_parent_check;

  if (node_to_be_decrease == node_to_be_decrease->right_sibling)
    parent_node->child = NULL;

  node_to_be_decrease->left_sibling->right_sibling = node_to_be_decrease->right_sibling;
  node_to_be_decrease->right_sibling->left_sibling = node_to_be_decrease->left_sibling;
  if (node_to_be_decrease == parent_node->child)
    parent_node->child = node_to_be_decrease->right_sibling;
  (parent_node->degree)--;

  node_to_be_decrease->left_sibling = node_to_be_decrease;
  node_to_be_decrease->right_sibling = node_to_be_decrease;
  H->min->left_sibling->right_sibling = node_to_be_decrease;
  node_to_be_decrease->right_sibling = H->min;
  node_to_be_decrease->left_sibling = H->min->left_sibling;
  H->min->left_sibling = node_to_be_decrease;

  node_to_be_decrease->parent = NULL;
  node_to_be_decrease->mark = false;
}

void cascading_cut(FIB_HEAP *H, NODE *parent_node){
  NODE *aux;
  aux = parent_node->parent;
  if (aux != NULL) {
    if (parent_node->mark == false) {
      parent_node->mark = true;
    } else {
      cut(H, parent_node, aux);
      cascading_cut(H, aux);
    }
  }
}

void decrease_key(FIB_HEAP *H, NODE *node_to_be_decrease, int new_key){
    int key_decrease = new_key;
    int old_key = node_to_be_decrease->key;
    NODE *parent_node;
    if (H == NULL) {
        printf("n FIbonacci heap not created ");
    return;
    }
    if (node_to_be_decrease == NULL) {
        printf("Node is not in the heap");
    }

    else{
        if(new_key!=0){
            node_to_be_decrease->key -= new_key;
        }else{
            node_to_be_decrease->key = new_key;
        }
        parent_node = node_to_be_decrease->parent;
        
        if ((parent_node != NULL) && (node_to_be_decrease->key < parent_node->key)) {
            cut(H, node_to_be_decrease, parent_node);
            cascading_cut(H, parent_node);
        }
        if (node_to_be_decrease->key < H->min->key) {
            H->min = node_to_be_decrease;
        }
        thirdValue=0;
    // }
    }
}

void *find_node(FIB_HEAP *H, NODE *n, int key, int value){
    // printf("new_key=%d\n",new_key);
    // if(new_key!=0)
    //     flag=true;
  NODE *find_use = n;
  NODE *f = NULL;
  find_use->visited = true;
  if (find_use->key == key && find_use->value == value) {
    find_use->visited = false;
    f = find_use;
    // if(flag){
    //     decrease_key(H, f, thirdValue);
    //     flag=false;
    // }
    // else
    decrease_key(H, f,thirdValue);
  }
  if (find_use->child != NULL) {
    find_node(H, find_use->child, key, value);
  }
  if ((find_use->right_sibling->visited != true)) {
    find_node(H, find_use->right_sibling, key, value);
  }

  find_use->visited = false;
}

FIB_HEAP *insertion_procedure(){
  FIB_HEAP *temp;
  int no_of_nodes, ele, ele_v, i;
  NODE *new_node;
  temp = (FIB_HEAP *)malloc(sizeof(FIB_HEAP));
  temp = NULL;
  if (temp == NULL) {
    temp = make_fib_heap();
  }
  printf(" n enter number of nodes to be insert = ");
  scanf("%d", &no_of_nodes);
  for (i = 1; i <= no_of_nodes; i++) {
    // printf("n node %d and its key value = ", i);
    printf("scan key & value");
    scanf("%d", &ele);
    scanf("%d", &ele_v);
    insertion(temp, new_node, ele, ele_v);
  }
  return temp;
}
void Delete_Node(FIB_HEAP *H, int dec_key, int dec_val){
  NODE *p = NULL;
  // find_node(H, H->min, dec_key, dec_val, INT_MIN);
  find_node(H, H->min, dec_key, dec_val);
  p = extract_min(H);
  // if (p != NULL)
  //   printf("n Node deleted");
  // else
  //   printf("n Node not deleted:some error");
}

void split(char **arr, char *str, const char *del) {
    char *s = strtok(str, del);

    while(s != NULL) {
        *arr++ = s;
        s = strtok(NULL, del);
    }
}

int main(int argc, char **argv){
    NODE *new_node, *min_node, *extracted_min, *node_to_be_decrease, *find_use;
    FIB_HEAP *heap, *h1, *h2;
    // const char *filename = "input_01.txt";
    const char *filename = "file.txt";
    int operation_no, new_key, dec_key,dec_val, ele, ele_v, i, no_of_nodes=1;
    heap = (FIB_HEAP *)malloc(sizeof(FIB_HEAP));
    heap = NULL;
    FILE *in_file = fopen(filename, "r");
    if (!in_file) {
        perror("fopen");
        exit(EXIT_FAILURE);
    }

    struct stat sb;
    if (stat(filename, &sb) == -1) {
        perror("stat");
        exit(EXIT_FAILURE);
    }

    char *file_contents = malloc(sb.st_size);
    char *arr[5];
    while (fscanf(in_file, "%[^\n] ", file_contents) != EOF) {
        // printf("> %s\n", file_contents);
        split(arr, file_contents, " ");
        // printf( " %s\n", arr[0] ); //printing the token
        // printf( "key = %d, value= %d, \n", atoi(arr[1]) , atoi(arr[2]) ); //printing the token
        int type =0;
        if(strcmp(arr[0],"insert")==0)
            type=2;
        else if(strcmp(arr[0],"quit")==0)
            type=9;
        else if(strcmp(arr[0],"delete")==0)
            type=7;
        else if(strcmp(arr[0],"decrease")==0)
            type=6;
        else if(strcmp(arr[0],"extract")==0)
            type=5;

        switch(type){
            case 2: //insert
                if (heap == NULL) {
                    heap = make_fib_heap();
                }
                insertion(heap, new_node, atoi(arr[1]), atoi(arr[2]));
                // print_heap(heap->min);
                break;
            case 5: //extract
                if (heap->min == NULL)
                    heap = make_fib_heap();
                else {
                    extracted_min = extract_min(heap);
                    printf("(%d)%d\n", extracted_min->key,extracted_min->value);
                    // printf("n Updated heap: n\n");
                    // print_heap(heap->min);
                }
                break;
            case 6: //decrease
                if (heap == NULL){}
                  // printf("Fibonacci heap is empty");
                else {
                    find_use = heap->min;
                    // printf("atoi(arr[3])=%d\n",atoi(arr[3]));
                    thirdValue = atoi(arr[3]);
                    find_node(heap, find_use, atoi(arr[1]), atoi(arr[2]));
                    
                    // printf("n Key decreased- Corresponding heap:n \n");
                    // print_heap(heap->min);
                }
                break;
            case 7: //delete
                if (heap == NULL)
                    printf("Fibonacci heap is empty");
                else {
                    // printf("key = %d, value = %d ",atoi(arr[1]), atoi(arr[2]));
                    Delete_Node(heap, atoi(arr[1]), atoi(arr[2]));
                    // printf("n Node Deleted- Corresponding heap:n \n");
                    // print_heap(heap->min);
                    // heap_decrease_key(heap, atoi(arr[1]), atoi(arr[2]), INT_MIN);
                    // heap_extract_min(H);
                    break;
                }
            case 9: //quit
                // print_heap(heap->min);
                break;
            default:
                break;
                // printf("Invalid choice ");
        }
    }

    fclose(in_file);
    free(heap);
    exit(EXIT_SUCCESS);
}
